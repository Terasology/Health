// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0
package org.terasology.module.health.events;

import org.terasology.gestalt.entitysystem.event.Event;
import org.terasology.gestalt.naming.Name;
import org.terasology.module.health.components.HealthComponent;
import org.terasology.module.health.components.RegenComponent;
import org.terasology.module.health.systems.RegenAuthoritySystem;
import org.terasology.module.health.time.Duration;

/**
 * Send this event to register a regeneration effect for an entity.
 * <p>
 * The targeted entity must have a {@link HealthComponent} for this effect to be registered.
 * <p>
 * The {@link RegenAuthoritySystem} manages regeneration effects and updates affected components every "tick".
 *
 * @see RegenAuthoritySystem
 * @see RegenComponent
 * @see HealthComponent
 */
public class RegisterRegenEvent implements Event {
    /**
     * Identifier for the cause of this regeneration effect.
     */
    public final Name id;
    /**
     * Regeneration effect duration.
     */
    public Duration duration;

    /**
     * Register an additional regeneration effect with infinite duration for the target entity.
     *
     * @param id identifier for the cause of this effect
     * 
     * @see RegisterRegenEvent#RegisterRegenEvent(Name, Duration) 
     */
    public RegisterRegenEvent(Name id) {
        this(id, Duration.INFINITE);
    }

    /**
     * Register an additional regeneration effect for the target entity.
     * <p>
     * The {@code id} is intended to uniquely identify the reason for this regeneration effect. For instance, it can
     * denote that regeneration was trigger by a potion, caused by a spell, or any other condition.
     * <p>
     * The {@code duration} denotes the minimal time the regeneration effect is present.
     * It is not guaranteed that the effect is removed afterwards, as effects can be re-registered.
     * On re-registration, the maximum of the remaining and new duration is kept.
     * If an effect reaches its "end of life", it is removed from the entity.
     * <p>
     * For instance, the following constructor call could belong to a small healing potion which lasts over a duration
     * of 5 seconds. Note, that there must be a system contributing to the collector event for the registered
     * regeneration effect identifier to determine the amount of health points regenerated by this effect.
     * <pre>
     * {@code
     * new RegisterRegenEvent(new Name("potions:smallHealingPotion"), Duration.fromSeconds(5));
     * }
     * </pre>
     *
     * @param id identifier for the cause of this effect
     * @param duration the duration of this effect
     */
    public RegisterRegenEvent(Name id, Duration duration) {
        this.id = id;
        this.duration = duration;
    }
}
